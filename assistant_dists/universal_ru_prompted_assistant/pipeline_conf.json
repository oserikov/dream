{
    "services": {
        "last_chance_service": {
            "connector": {
                "protocol": "python",
                "class_name": "PredefinedTextConnector",
                "response_text": "Извини, что-то пошло не так в моем мозгу. Пожалуйста, повтори предыдущую реплику.",
                "annotations": {
                    "sentseg": {
                        "punct_sent": "Извини, что-то пошло не так в моем мозгу. Пожалуйста, повтори предыдущую реплику.",
                        "segments": [
                            "Извини, что-то пошло не так в моем мозгу.",
                            "Пожалуйста, повтори предыдущую реплику."
                        ]
                    }
                }
            },
            "state_manager_method": "add_bot_utterance_last_chance",
            "tags": [
                "last_chance"
            ],
            "is_enabled": true,
            "source": {
                "component": "components/nbRgFzod7Qx6M7GL6oiPg.yml",
                "service": "services/agent_services/service_configs/dream_persona_ruxglm_prompted"
            }
        },
        "timeout_service": {
            "connector": {
                "protocol": "python",
                "class_name": "PredefinedTextConnector",
                "response_text": "Извини, что-то пошло не так в моем мозгу. Пожалуйста, повтори предыдущую реплику.",
                "annotations": {
                    "sentseg": {
                        "punct_sent": "Извини, что-то пошло не так в моем мозгу. Пожалуйста, повтори предыдущую реплику.",
                        "segments": [
                            "Извини, что-то пошло не так в моем мозгу.",
                            "Пожалуйста, повтори предыдущую реплику."
                        ]
                    }
                }
            },
            "state_manager_method": "add_bot_utterance_last_chance",
            "tags": [
                "timeout"
            ],
            "is_enabled": true,
            "source": {
                "component": "components/nbRgFzod7Qx6M7GL6oiPg.yml",
                "service": "services/agent_services/service_configs/dream_persona_ruxglm_prompted"
            }
        },
        "annotators": {
        },
        "candidate_annotators": {
            "dialogrpt": {
                "connector": {
                    "protocol": "http",
                    "timeout": 1.0,
                    "url": "http://dialogrpt-ru:8122/respond"
                },
                "dialog_formatter": "state_formatters.dp_formatters:hypotheses_with_context_list",
                "response_formatter": "state_formatters.dp_formatters:simple_formatter_service",
                "previous_services": [
                    "skills"
                ],
                "state_manager_method": "add_hypothesis_annotation_batch",
                "is_enabled": true,
                "source": {
                    "component": "components/DUW2u7FwPMyhBOWrK1HTg.yml",
                    "service": "services/dialogrpt_ru/service_configs/dialogrpt-ru"
                }
            }
        },
        "response_annotators": {},
        "response_annotator_selectors": {
            "connector": {
                "protocol": "python",
                "class_name": "skill_selectors.post_annotator_selector.connector:PostAnnotatorSelectorConnector",
                "annotator_names": [
                    "sentseg"
                ]
            },
            "response_formatter": "state_formatters.dp_formatters:simple_formatter_service",
            "tags": [
                "selector"
            ],
            "is_enabled": true,
            "source": {
                "component": "components/LXrJDIf43gwNmPMNXG5Eg.yml",
                "service": "services/response_annotator_selectors/service_configs/agent"
            }
        },
        "skill_selectors": {
            "description_based_skill_selector": {
                "connector": {
                    "protocol": "python",
                    "class_name": "skill_selectors.description_based_skill_selector.connector:DescriptionBasedSkillSelectorConnector"
                },
                "dialog_formatter": "state_formatters.dp_formatters:base_skill_selector_formatter_dialog",
                "response_formatter": "state_formatters.dp_formatters:simple_formatter_service",
                "previous_services": [
                    "annotators"
                ],
                "tags": [
                    "selector"
                ],
                "is_enabled": true,
                "source": {
                    "component": "components/dfsw4bji8bgjq2.yml",
                    "service": "skill_selectors/description_based_skill_selector/service_configs/agent"
                }
            }
        },
        "skills": {
            "dff_universal_prompted_skill": {
                "connector": {
                    "protocol": "http",
                    "timeout": 120.0,
                    "url": "http://dff-universal-ru-prompted-skill:8161/respond"
                },
                "dialog_formatter": {
                    "name": "state_formatters.dp_formatters:dff_prompted_skill_formatter",
                    "skill_name": "dff_universal_prompted_skill"
                },
                "response_formatter": "state_formatters.dp_formatters:skill_with_attributes_formatter_service",
                "previous_services": [
                    "skill_selectors"
                ],
                "state_manager_method": "add_hypothesis",
                "is_enabled": true,
                "source": {
                    "component": "components/dfagno94ntl23rbj.yml",
                    "service": "skills/dff_universal_prompted_skill/service_configs/dff-universal-ru-prompted-skill"
                }
            },
            "dummy_skill": {
                "connector": {
                    "protocol": "python",
                    "class_name": "skills.dummy_skill.connector:DummySkillConnector"
                },
                "dialog_formatter": "state_formatters.dp_formatters:utt_sentrewrite_modified_last_dialog",
                "response_formatter": "state_formatters.dp_formatters:skill_with_attributes_formatter_service",
                "previous_services": [
                    "skill_selectors"
                ],
                "state_manager_method": "add_hypothesis",
                "is_enabled": true,
                "source": {
                    "component": "components/uYkoK0vRp4bbIg9akI1yw.yml",
                    "service": "skills/dummy_skill/service_configs/agent"
                }
            }
        },
        "response_selectors": {
            "response_selector": {
                "connector": {
                    "protocol": "http",
                    "timeout": 1.0,
                    "url": "http://ranking-based-response-selector-ru:8002/respond"
                },
                "dialog_formatter": "state_formatters.dp_formatters:cropped_dialog",
                "response_formatter": "state_formatters.dp_formatters:base_response_selector_formatter_service",
                "previous_services": [
                    "candidate_annotators"
                ],
                "state_manager_method": "add_bot_utterance",
                "is_enabled": true,
                "source": {
                    "component": "components/hE12LfxAkX3K9gU0nU4yE2.yml",
                    "service": "response_selectors/ranking_based_response_selector/service_configs/ranking-based-response-selector-ru"
                }
            }
        }
    },
    "metadata": {
        "display_name": "Universal Russian Prompted Assistant",
        "author": "DeepPavlov",
        "description": "Russian Dream Universal Chatbot that utilizes Russian XGLM 4.5B (in a half-precision mode) by Dmitry Kosenko to generate responses based on the given prompt.",
        "version": "0.0.1",
        "date_created": "2023-01-10T02:00:00",
        "ram_usage": "50 GB",
        "gpu_usage": "30 GB",
        "disk_usage": "50 GB"
    }
}